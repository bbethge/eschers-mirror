#!/usr/bin/env python

import OpenGL
#OpenGL.ERROR_CHECKING = False
OpenGL.ERROR_ON_COPY = True
from OpenGL.GL import *
import pygame
from pygame.locals import *
import pango
import os
import sys
import time
import bisect
from Config import config
from Actor import Actor
#from RightTriGrid import RightTriGrid
from Layout import ScrollableLayout
from MainLoop import mainLoop
from Button import Button
from Scrollbar import Scrollbar
from ScrolledText import ScrolledText
from ActorContainer import ActorContainer
from MainMenu import MainMenu

class VideoChooser(ActorContainer):
	"""
	A screen that lets the user choose a video to play with.  The videos must be
	stored under a directory which is supplied to __init__.
	"""
	scrollAmount = 4
	class File:
		def __init__(self, index, name):
			self.index = index
			self.name = name
		def __cmp__(self, other):
			return self.index - other.index
	
	def __init__(self, parent, pos, size, color, videoDir):
		ActorContainer.__init__(self, parent)
		self.color = color
		self.pos = pos
		self.size = size

		fileNames = []
		for root, dirs, dirFiles in os.walk(unicode(videoDir)):
			fileNames += dirFiles
		fileNames.sort()
		filesStr = u"\n".join(fileNames)
		self.files = []
		index = 0
		for fileName in fileNames:
			self.files.append(self.File(index, fileName))
			index += len(fileName) + 1
		self.files.append(self.File(index, None))
		
		self.scrollbar = Scrollbar(self, pos, size[1], 1., color)
		self.scrollbar.pos = (
			self.pos[0]+self.size[0]-self.scrollbar.size[0], self.pos[1])

		self.layout = ScrollableLayout(
			pos[0], pos[1], self.size[0]-self.scrollbar.size[0], self.size[1])
		self.layout.layout.set_text(filesStr)
		#layoutAttrs = pango.AttrList()
		#layoutAttrs.insert(
		#	pango.AttrForeground(
		#		0x8000, 0x8000, 0xff00, 0, len(filesStr)))
		#self.layout.layout.set_attributes(layoutAttrs)
		#self.layout.layoutChanged()
		self.layout.setColor(self.color)

		self.listHeight = self.layout.layout.get_pixel_size()[1]
		self.scrollbar.setPageSize(min(1., float(self.size[1])/self.listHeight))
		self.scrollbar.scrolled.addHandler(
			self.__class__.onScrollbarScrolled, self)

		self.selectedIndex = 0  # Index in filesStr of currently selected option

	def die(self):
		self.scrollbar.scrolled.removeHandler(
			self.__class__.onScrollbarScrolled, self)
		ActorContainer.die(self)
	
	def draw(self):
		ActorContainer.draw(self)
		glPushMatrix()
		glTranslated(self.pos[0], self.pos[1], 0.)
		self.layout.draw()
		glPopMatrix()

	def onScrollbarScrolled(self, amount):
		self.layout.scroll(0, amount * (self.listHeight-self.size[1]))
	
	def onMouseMotion(self, event):
		index = self.layout.xy_to_index(
			event.pos[0]-self.pos[0], event.pos[1]-self.pos[1])
		filesIndex = (
			bisect.bisect_right(self.files, self.File(index, None)) - 1)
		start = self.files[filesIndex].index
		if start != self.selectedIndex:
			self.selectedIndex = start
			end = self.files[filesIndex+1].index
			layoutAttrs = pango.AttrList()
			layoutAttrs.insert(
				pango.AttrForeground(
					0x100*self.color[0], 0x100*self.color[1],
					0x100*self.color[2], 0, self.files[-1].index))
			layoutAttrs.insert(
				pango.AttrBackground(
					0x100*self.color[0], 0x100*self.color[1],
					0x100*self.color[2], start, end))
			layoutAttrs.insert(
				pango.AttrForeground(0, 0, 0, start, end))
			self.layout.layout.set_attributes(layoutAttrs)
			self.layout.layoutChanged()
	
	def onMouseButtonDown(self, event):
		if (
				0 <= event.pos[0]-self.pos[0]
					< self.size[0]-self.scrollbar.size[0]
				and 0 <= event.pos[1]-self.pos[1] < self.size[1]):
			if event.button == 4:  # scroll up
				dist = -min(
					self.scrollbar.value * (self.listHeight-self.size[1]),
					self.scrollAmount)
				self.layout.scroll(0, dist)
				self.scrollbar.value += (
					float(dist) / (self.listHeight-self.size[1]))
			elif event.button == 5:  # scroll down
				dist = min(
					(1.-self.scrollbar.value) * (self.listHeight-self.size[1]),
					self.scrollAmount)
				self.layout.scroll(0, dist)
				self.scrollbar.value += (
					float(dist) / (self.listHeight-self.size[1]))
			elif event.button == 1:
				index = self.layout.xy_to_index(
					event.pos[0]-self.pos[0], event.pos[1]-self.pos[1])
				filesIndex = (
					bisect.bisect_right(self.files, self.File(index, None)) - 1)
				print self.files[filesIndex].name

if __name__ == '__main__':
	pygame.display.init()
	pygame.display.set_mode(config.window_size, pygame.OPENGL|pygame.DOUBLEBUF)
	pygame.display.set_caption("Escher's Mirror", "Escher's Mirror")
	
	glPixelStorei(GL_UNPACK_ALIGNMENT, 1)
	
	glMatrixMode(GL_PROJECTION)
	# We make GL use lexographic coordinates (y increases downward) because
	# other libraries also use them and are less flexible about their coordinate
	# systems.
	glOrtho(0, config.window_size[0], config.window_size[1], 0, -1, 1)
	glMatrixMode(GL_MODELVIEW)
	glLoadIdentity()
	
	glEnable(GL_TEXTURE_2D)
	glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE)
	
	glEnableClientState(GL_TEXTURE_COORD_ARRAY)
	glEnableClientState(GL_VERTEX_ARRAY)
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
	glClearColor(0.5, 0.5, 0.5, 1.)
	
	m = MainMenu(mainLoop, [0xa0, 0xff, 0x90])
	
	mainLoop.run()
	
	sys.exit(0)
	
	chooser = VideoChooser(config.video_dir)
	videoFile = chooser.run()
	
	if videoFile is not None:
		grid = RightTriGrid(
			os.path.join(config.video_dir, videoFile),
			config.grid_rows, config.grid_cols)
		grid.run()
	
	config.write()

# vim: set ts=4 sts=4 sw=4 ai noet :
