#!/usr/bin/env python

import sys
sys.path += ['build/lib.linux-x86_64-2.6']
import pygame
from pygame.locals import *
from OpenGL.GL import *
import VideoDecode
import os
from threading import Condition

class Frame:
	pass

frame = Frame()
frame.cond = Condition()
frame.isNew = False
frame.width = 0
frame.height = 0

def frameCb(format, width, height, aspect, data):
	frame.cond.acquire()
	frame.isNew = True
	frame.sizeChanged = frame.width != width or frame.height != height
	frame.width = width
	frame.height = height
	frame.data = data
	frame.cond.notifyAll()
	frame.cond.release()

def handleSizeChange():
	# Find the smallest power-of-2--sized square that can contain the frame
	texSize = 1
	while texSize < max(frame.width, frame.height):
		texSize *= 2
	# Set the active texture to a blank texSize*texSize square (the image
	# will be filled in later).
	texInitializer = '\0' * (3*frame.width*frame.height)
	glTexImage2D(
		GL_TEXTURE_2D, 0, GL_RGB, texSize, texSize, 0,
		GL_RGB, GL_UNSIGNED_BYTE, texInitializer)
	# Set up the texture matrix so that the image occupies a region aspect
	# wide by 1.0 high.
	glMatrixMode(GL_TEXTURE)
	glLoadIdentity()
	glTranslated(0.0, float(frame.height)/texSize, 0.0)
	glScaled(float(frame.height)/texSize, -float(frame.height)/texSize, 1.0)
	# Set up the projection matrix so that the window is aspect wide by 1.0
	# high, with the origin in the lower left.
	glMatrixMode(GL_PROJECTION)
	glLoadIdentity()
	glOrtho(0.0, float(frame.width)/frame.height, 0.0, 1.0, -1.0, 1.0)
	glMatrixMode(GL_MODELVIEW)
	
if __name__ == '__main__':
	pygame.display.init()
	pygame.display.set_mode((640,480), pygame.OPENGL|pygame.DOUBLEBUF)
	glPixelStorei(GL_UNPACK_ALIGNMENT, 1)
	glEnable(GL_TEXTURE_2D)
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, 0)
	glClearColor(0.0, 0.0, 0.0, 1.0)
	glMatrixMode(GL_MODELVIEW)
	glLoadIdentity()
	VideoDecode.init(
		os.path.join(os.path.expanduser('~'), '.xine', 'config'),
		sys.argv[1], frameCb)
	VideoDecode.start()

	while True:
		frame.cond.acquire()
		frame.cond.wait(0.05)
		if frame.isNew:
			if frame.sizeChanged:
				handleSizeChange()
			glRasterPos2i(0, 240)
			glClear(GL_COLOR_BUFFER_BIT)
			glTexSubImage2D(
				GL_TEXTURE_2D, 0, 0, 0,
				frame.width, frame.height,
				GL_RGB, GL_UNSIGNED_BYTE, frame.data)
			pixAspect = float(frame.width)/frame.height
			glBegin(GL_QUADS)
			glTexCoord2d(0.0, 0.0)
			glVertex2d(0.0, 0.0)
			glTexCoord2d(pixAspect, 0.0)
			glVertex2d(pixAspect, 0.0)
			glTexCoord2d(pixAspect, 1.0)
			glVertex2d(pixAspect, 1.0)
			glTexCoord2d(0.0, 1.0)
			glVertex2d(0.0, 1.0)
			glEnd()
			pygame.display.flip()
			frame.isNew = False
		frame.cond.release()
		event = pygame.event.poll()
		if event.type == QUIT:
			break
	VideoDecode.stop()
	VideoDecode.quit()
